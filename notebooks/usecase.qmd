---
title: "Use-case"
engine: knitr
---

The provided dataset is a perturb-seq dataset that was generated as part of an OpenProblems competition on predicting how small molecules change gene expression in different cell types [^kaggle]. The winners of the competition have since been added to the OpenProblems Perturbation Prediction benchmarking task [^op].

As part of the competition, competitors received the differential gene expression (DGE) of genes in cell types treated with different small molecules, and had to predict the DGE of genes in cell types of which some small molecules were withheld. The task is illustrated in the figure below [@fig-dge].

![DGE perturbation prediction task](../assets/perturbation_prediction.png){#fig-dge}

The dataset consists of single-cell RNA-seq data from 4 cell types treated with 144 small molecules in 3 replicates. The DGE matrix (which competitors received) was in the following steps:

* Retrieve annotated single-cell gene expression matrix
* Compute pseudobulk for each cell type and small molecule
* Compute differential expression between each small molecule and control for each cell type

We will use the dataset to illustrate how to perform the following steps.

## 1. Retrieving the data

The dataset has since been uploaded to SRA [^sra], will be uploaded to GEO, and is currently available from S3 [^s3].

If you haven't already, you can download the dataset from S3 using the following command:

```{bash s3_sync}
if [[ ! -f usecase_data/sc_counts_reannotated_with_counts.h5ad ]]; then
  aws s3 cp \
    --no-sign-request \
    s3://openproblems-bio/public/neurips-2023-competition/sc_counts_reannotated_with_counts.h5ad \
    usecase_data/sc_counts_reannotated_with_counts.h5ad
fi
```

## 2. Loading the data

The dataset is stored in an AnnData object, which can be loaded in Python as follows:

```{python load_anndata}
import anndata as ad

adata = ad.read_h5ad("usecase_data/sc_counts_reannotated_with_counts.h5ad")

adata
```

The same code can be run in R using the `anndata` package (not run):

```r
library(anndata)

adata <- read_h5ad("usecase_data/sc_counts_reannotated_with_counts.h5ad")

adata
```


## 3. Compute pseudobulk

```{python import_pandas}
import pandas as pd
```

Combine data in a single data frame and compute pseudobulk

```{python compute_pseudobulk}
combined = pd.DataFrame(
  adata.X.toarray(),
  index=adata.obs["plate_well_celltype_reannotated"],
)
combined.columns = adata.var_names
pb_X = combined.groupby(level=0).sum()
```

Construct obs for pseudobulk. Use 'plate_well_celltype_reannotated' as index and make sure to retain the columns 'sm_name', 'cell_type', and 'plate_name':

```{python pb_obs}
pb_obs = adata.obs[["sm_name", "cell_type", "plate_name", "well"]].copy()
pb_obs.index = adata.obs["plate_well_celltype_reannotated"]
pb_obs = pb_obs.drop_duplicates()
```

Create AnnData object:

```{python pb_adata}
pb_adata = ad.AnnData(
  X=pb_X.loc[pb_obs.index].values,
  obs=pb_obs,
  var=adata.var,
)
```

Store to disk:

```{python store_pseudobulk}
pb_adata.write_h5ad("usecase_data/pseudobulk.h5ad")
```

## 4. Compute DE

```{r load_pbdata}
library(anndata)
library(dplyr, warn.conflicts = FALSE)

pb_adata <- read_h5ad("usecase_data/pseudobulk.h5ad")
```

Select small molecule and control:
```{r select_sm_control}
sm_name <- "Belinostat"
control_name <- "Dimethyl Sulfoxide"
```

Create DESeq dataset:
```{r create_deseq_dataset}
# transform counts matrix
count_data <- t(pb_adata$X)
storage.mode(count_data) <- "integer"

# subset to small molecule and control
ix <- pb_adata$obs$sm_name %in% c(sm_name, control_name)

# create dataset
dds <- DESeq2::DESeqDataSetFromMatrix(
  countData = count_data[, ix],
  colData = pb_adata$obs[ix, ],
  design = ~ sm_name + cell_type + plate_name,
)
```

Run DESeq2:
```{r run_deseq}
dds <- DESeq2::DESeq(dds)
```

Get results:
```{r get_results}
res <- DESeq2::results(dds, contrast=c("sm_name", sm_name, control_name)) |>
  as.data.frame()
```

Preview results:
```{r preview_results}
res |>
  arrange(padj) |>
  head(10)
```

Write to disk:
```{r write_results}
write.csv(res, "usecase_data/de_contrasts.csv")
```


## Footnotes

[^kaggle]: Kaggle: Open Problems - Single Cell Perturbations - https://www.kaggle.com/competitions/open-problems-single-cell-perturbations/overview

[^op]: OpenProblems - Perturbation Prediction - https://openproblems.bio/results/perturbation_prediction/

[^sra]: SRA PRJNA1149320 - Open Problems Perurbation Prediction dataset - https://www.ncbi.nlm.nih.gov/bioproject/PRJNA1149320

[^s3]: H5AD dataset on AWS S3 - https://openproblems-bio.s3.amazonaws.com/public/neurips-2023-competition/sc_counts_reannotated_with_counts.h5ad