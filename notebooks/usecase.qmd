---
title: "Use-case"
engine: knitr
---

The provided dataset is a perturb-seq dataset that was generated as part of an OpenProblems competition on predicting how small molecules change gene expression in different cell types [^kaggle]. The winners of the competition have since been added to the OpenProblems Perturbation Prediction benchmarking task [^op].

As part of the competition, competitors received the differential gene expression (DGE) of genes in cell types treated with different small molecules, and had to predict the DGE of genes in cell types of which some small molecules were withheld. The task is illustrated in the figure below [@fig-dge].

![DGE perturbation prediction task](../assets/perturbation_prediction.png){#fig-dge}

The dataset consists of single-cell RNA-seq data from 4 cell types treated with 144 small molecules in 3 replicates. The DGE matrix (which competitors received) was in the following steps:

* Retrieve annotated single-cell gene expression matrix
* Compute pseudobulk for each cell type and small molecule
* Compute differential expression between each small molecule and control for each cell type

We will use the dataset to illustrate how to perform the following steps.

## 1. Retrieving the data

The dataset has since been uploaded to SRA [^sra], will be uploaded to GEO, and is currently available from S3 [^s3].

If you haven't already, you can download the dataset from S3 using the following command:

```{bash}
if [[ ! -f usecase_data/sc_counts_reannotated_with_counts.h5ad ]]; then
  aws s3 cp \
    --no-sign-request \
    s3://openproblems-bio/public/neurips-2023-competition/sc_counts_reannotated_with_counts.h5ad \
    usecase_data/sc_counts_reannotated_with_counts.h5ad
fi
```

## 2. Loading the data

The dataset is stored in an AnnData object, which can be loaded in Python as follows:

```{python}
import anndata as ad

adata = ad.read_h5ad("usecase_data/sc_counts_reannotated_with_counts.h5ad")

adata
```

The same code can be run in R using the `anndata` package (not run):

```r
library(anndata)

adata <- read_h5ad("usecase_data/sc_counts_reannotated_with_counts.h5ad")

adata
```


## 3. Compute pseudobulk

```{python}
import pandas as pd
```

Combine data in a single data frame and compute pseudobulk

```{python}
combined = pd.DataFrame(
  adata.X.toarray(),
  index=adata.obs["plate_well_celltype_reannotated"],
)
combined.columns = adata.var_names
pb_X = combined.groupby(level=0).sum()
```

Construct obs for pseudobulk. Use 'plate_well_celltype_reannotated' as index and make sure to retain the columns 'sm_name', 'cell_type', and 'plate_name':

```{python}
pb_obs = adata.obs[["sm_name", "cell_type", "plate_name", "well"]].copy()
pb_obs.index = adata.obs["plate_well_celltype_reannotated"]
pb_obs = pb_obs.drop_duplicates()
```

Create AnnData object:

```{python}
pb_adata = ad.AnnData(
  X=pb_X.loc[pb_obs.index].values,
  obs=pb_obs,
  var=adata.var,
)
```

Store to disk:

```{python}
pb_adata.write_h5ad("usecase_data/pseudobulk.h5ad")
```

## 4. Compute DE

:::{.callout-note}
Currently not running the R code blocks because of compute time, will be fixed soon.
:::

```r
library(anndata)
library(dplyr)

pb_adata <- read_h5ad("usecase_data/pseudobulk.h5ad")

# add limma compatible columns
limma_trafo <- function(value) {
  gsub("[^[:alnum:]]", "_", value)
}
pb_adata$obs <- pb_adata$obs |>
  mutate(
    sm_name_cell_type = limma_trafo(paste0(sm_name, "_", cell_type)),
    plate_name_ = limma_trafo(plate_name)
  )

control_compound <- limma_trafo("Dimethyl Sulfoxide")

new_obs <- pb_adata$obs |>
  filter(sm_name != control_compound)

# Compute DE for each cell type
d0 <- Matrix::t(pb_adata$X) %>%
  edgeR::DGEList() %>%
  edgeR::calcNormFactors()

# create design matrix
design_matrix <- model.matrix(~ 0 + sm_name_cell_type + plate_name_, pb_adata$obs)

# Voom transformation and lmFit
v <- limma::voom(d0, design = design_matrix)
fit <- limma::lmFit(v, design_matrix)

# compute contrasts for each cell type and small molecule
# NOTE: normally you'd compute this for each row in `new_obs`,
# but for demonstration purposes we'll only compute it for the first row

row_i <- 1

cat("Computing DE contrasts (", row_i, "/", nrow(new_obs), ")\n", sep = "")
control_name <- paste0(
  limma_trafo(control_compound), "_", limma_trafo(new_obs$cell_type[[row_i]])
)

contrast_formula <- paste0(
  "sm_name_cell_type", new_obs$sm_name_cell_type[[row_i]], " - ",
  " - ",
  "sm_name_cell_type", control_name
)

contr <- limma::makeContrasts(
  contrasts = contrast_formula,
  levels = colnames(coef(fit))
)

# compute DE
out <- limma::contrasts.fit(fit, contr) %>%
  limma::eBayes(robust = TRUE) %>%
  limma::topTable(n = Inf, sort = "none") %>%
  rownames_to_column("gene") %>%
  mutate(row_i = row_i)

write_csv(out, "usecase_data/de_contrasts.csv")
```


## Footnotes

[^kaggle]: Kaggle: Open Problems - Single Cell Perturbations - https://www.kaggle.com/competitions/open-problems-single-cell-perturbations/overview

[^op]: OpenProblems - Perturbation Prediction - https://openproblems.bio/results/perturbation_prediction/

[^sra]: SRA - PRJNA1149320 XXX YYY - https://www.ncbi.nlm.nih.gov/bioproject/PRJNA1149320

[^s3]: H5AD dataset on AWS S3 - https://openproblems-bio.s3.amazonaws.com/public/neurips-2023-competition/sc_counts_reannotated_with_counts.h5ad