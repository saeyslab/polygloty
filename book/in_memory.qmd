---
title: In memory interoperability (from Python)
engine: knitr
---

In this notebook, we will showcase how to call R code from Python.
We will make use of rpy2 and anndata2ri.

Make sure you have downloaded the data.


Read in the anndata object
```{python}
import anndata as ad

adata_path = "usecase/data/sc_counts_reannotated_with_counts.h5ad"
adata = ad.read_h5ad(adata_path)
```


We can use rpy2 to run R code within a Python process.
If you wish to convert numpy matrices, you need to use the right convertor.

This is an example of how you import rpy2, and convert a matrix for use in R functions.

```{python}
counts = adata.X # matrices are columnn major in R, and row-major in Python
counts = counts[:100, :1000] # subset for speed of example
counts_dense = counts.todense() # sparse matrices are not supported in rpy2
```


```{python}
import rpy2
import rpy2.robjects as robjects

from rpy2.robjects import numpy2ri
from rpy2.robjects import default_converter

np_cv_rules = default_converter + numpy2ri.converter

with np_cv_rules.context() as cv:
    robjects.globalenv["counts_matrix"] = counts_dense

    dim = robjects.r["dim"]
    print(dim(robjects.globalenv["counts_matrix"]))
```


# Usecase

We will perform the Compute DE step not in R, but in Python

```{python load_data}
import anndata as ad

pd_adata = ad.read_h5ad("usecase/data/pseudobulk.h5ad")
```

Select small molecule and control:

```{python select_sm_control}
sm_name = "Belinostat"
control_name = "Dimethyl Sulfoxide"
```

Create DESeq dataset:

```{python thing}
import rpy2.rinterface

from rpy2.robjects.packages import importr
base = importr('base')
print(base._libPaths())
```

```{python install}

import rpy2
import rpy2.robjects as robjects

from rpy2.robjects.packages import importr

utils = importr('utils')
# utils.install_packages('DESeq2')

## base.source("../renv/activate.R")

DESeq2 = importr("DESeq2")

```

```{python create_deseq_dataset}
import numpy as np

import rpy2
import rpy2.robjects as robjects

from rpy2.robjects import numpy2ri
from rpy2.robjects import pandas2ri

from rpy2.robjects import default_converter
from rpy2.robjects.packages import importr

DESeq2 = importr("DESeq2")

np_cv_rules = default_converter + numpy2ri.converter + pandas2ri.converter

with np_cv_rules.context() as cv:
    counts_dense = np.transpose(pd_adata.X.astype(np.int32))

    robjects.globalenv["count_data"] = counts_dense
    robjects.globalenv["obs_data"] = pd_adata.obs

```

```{python create}
from rpy2.robjects import Formula

design_formula = Formula('~ sm_name + plate_name')

dds = DESeq2.DESeqDataSetFromMatrix(countData = robjects.globalenv["count_data"],
        colData = robjects.globalenv["obs_data"],
        design = design_formula)
```


Run DESeq2:
```{python run_deseq}
dds = DESeq2.DESeq(dds)
```


Get results:
```{python get_results}
contrastv = robjects.StrVector(["sm_name", sm_name, control_name])
res = DESeq2.results(dds, contrast=contrastv)

base = importr('base')
res = base.as_data_frame(res)
```

Preview results:
```{python preview_results}
dplyr = importr('dplyr')
utils = importr('utils')

res = utils.head(dplyr.arrange(res, 'padj'), 10)
```

Write to disk:
```{python write_results}
with (robjects.default_converter + pandas2ri.converter).context():
    res_pd = robjects.conversion.get_conversion().rpy2py(res)

    res_pd.to_csv("usecase/data/de_contrasts.csv")
```

