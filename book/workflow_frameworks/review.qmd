---
title: Review of Workflow Frameworks
engine: knitr
---

[A lot of different workflow frameworks exist](https://github.com/pditommaso/awesome-pipeline), and there are a lot of factors to consider when choosing the right one for your project.
@Wratten2021 conducted a review of popular workflow managers for bioinformatics, evaluating them based on several key aspects, including ease of use, expressiveness, portability, scalability, and learning resources ([@tbl-strengths]).


| Tool | Class | Ease of use | Expressiveness | Portability | Scalability | Learning resources | Pipeline initiatives |
| ---- | ----- | ----------- | -------------- | ----------- | ----------- | ------------------ | -------------------- |
| Galaxy | Graphical | ●●● | ●○○ | ●●● | ●●● | ●●● | ●●○ |
| KNIME  | Graphical | ●●● | ●○○ | ○○○ | ●●◐ | ●●● | ●●○ |
| Nextflow | DSL | ●●○ | ●●● | ●●● | ●●● | ●●● | ●●● |
| Snakemake | DSL | ●●○ | ●●● | ●●◐ | ●●● | ●●○ | ●●● |
| GenPipes | DSL | ●●○ | ●●● | ●●○ | ●●○ | ●●○ | ●●○ |
| bPipe | DSL | ●●○ | ●●● | ●●○ | ●●◐ | ●●○ | ●○○ |
| Pachyderm | DSL | ●●○ | ●●● | ●○○ | ●●○ | ●●● | ○○○ |
| SciPipe | Library | ●●○ | ●●● | ○○○ | ○○○ | ●●○ | ○○○ |
| Luigi | Library | ●●○ | ●●● | ●○○ | ●●◐ | ●●○ | ○○○ |
| Cromwell + WDL | Execution + workflow specification | ●○○ | ●●○ | ●●● | ●●◐ | ●●○ | ●●○ |
| cwltool + CWL | Execution + workflow specification | ●○○ | ●●○ | ●●◐ | ○○○ | ●●● | ●●○ |
| Toil + CWL/WDL/Python | Execution + workflow specification | ●○○ | ●●● | ●◐○ | ●●● | ●●○ | ●●○ |

: Overview of workflow managers for bioinformatics [@Wratten2021]. {#tbl-strengths}

Even more interesting is the accompanying GitHub repository ([GoekeLab/bioinformatics-workflows](https://github.com/GoekeLab/bioinformatics-workflows)), which contains a **Proof of Concept (PoC) RNA-seq workflow** implemented in the different workflow frameworks. These implementations were contributed and reviewed by the **developers of the respective frameworks** themselves!

Looking at these implementations, at first glance, one would think that the differences between the frameworks are minimal, and that the choice of framework is mostly a matter of personal preference.

## Comparing PoC Workflows to Community-Made Modules

However, comparing the POC workflows (_left_) to community-made modules (_right_), it becomes clear that **creating production-ready components** requires a lot more than **specifying a command's input and output files**.


:::{.column-page}

### Nextflow

:::{.grid}

:::{.g-col-5}

Wratten et al. 2021 PoC ([Source](https://github.com/GoekeLab/bioinformatics-workflows/tree/master/nextflow)):

:::{.panel-tabset}

# `main.nf`

```{embed lang="groovy"}
examples/nextflow/wratten2021_poc/main.nf
```

:::

:::

:::{.g-col-7}

nf-core ([Source](https://github.com/nf-core/modules/tree/master/modules/nf-core/fastqc)):

:::{.panel-tabset}

# `environment.yml`

```{embed lang="yaml"}
examples/nextflow/nf-core/environment.yml
```

# `main.nf`

```{embed lang="groovy"}
examples/nextflow/nf-core/main.nf
```

# `meta.yaml`

```{embed lang="yaml"}
examples/nextflow/nf-core/meta.yml
```

# `tests/main.nf.test`

```{embed lang="groovy"}
examples/nextflow/nf-core/tests/main.nf.test
```

:::

:::

:::

:::



:::{.column-page}

### Snakemake

:::{.grid}

:::{.g-col-5}

Wratten et al. 2021 PoC ([Source](https://github.com/GoekeLab/bioinformatics-workflows/tree/master/snakemake)):

:::{.panel-tabset}

# `fastqc.smk`

```{embed lang="python"}
examples/snakemake/wratten2021_poc/fastqc.smk
```

:::

:::

:::{.g-col-7}

snakemake-wrappers ([Source](https://github.com/snakemake/snakemake-wrappers/tree/master/bio/fastqc)):

:::{.panel-tabset}

# `environment.yaml`

```{embed lang="yaml"}
examples/snakemake/snakemake-wrappers/environment.yaml
```

# `meta.yaml`

```{embed lang="yaml"}
examples/snakemake/snakemake-wrappers/meta.yaml
```

# `wrapper.py`

```{embed lang="python"}
examples/snakemake/snakemake-wrappers/wrapper.py
```

# `test/Snakefile`

```{embed lang="python"}
examples/snakemake/snakemake-wrappers/test/Snakefile
```

:::

:::

:::

:::

:::{.column-page}

### Toil + WDL

:::{.grid}

:::{.g-col-5}

Wratten et al. 2021 PoC ([Source](https://github.com/GoekeLab/bioinformatics-workflows/tree/master/wdl)):

:::{.panel-tabset}

# `fastqc.wdl`

```{embed lang="bash"}
examples/wdl/wratten2021_poc/fastqc.wdl
```

:::

:::

:::{.g-col-7}

BioWDL ([Source](https://github.com/biowdl/tasks/blob/develop/fastqc.wdl)):

:::{.panel-tabset}

# `fastqc.wdl` (Excerpt)

```{embed lang="bash"}
examples/wdl/biowdl/fastqc.wdl
```

# `fastqc.wdl` (Full)

```{embed lang="bash"}
examples/wdl/biowdl/fastqc_full.wdl
```

:::

:::

:::

:::


## Limitations of the study

However, the [Supplementary Table](https://static-content.springer.com/esm/art%3A10.1038%2Fs41592-021-01254-9/MediaObjects/41592_2021_1254_MOESM2_ESM.xlsx) shows that the comparison in [@tbl-strengths] was rather limited, since the score of each category was only based on a single criterion. Of the following categories, only "Scalability" was determined by more than one criterion:

* **Ease of Use**: Graphical interface with execution environment (score of 3), programming interface with in-built execution environment (score of 2), separated development and execution environment (score of 1).
* **Expressiveness**: Based on an existing programming language (3) or a new language or restricted vocabulary (2), primary interaction with graphical user interface (1).
* **Portability**:  Integration with three or more container and package manager platforms (3), two platforms are supported (2), one platform is supported (1).
* **Scalability**: Considers cloud support, scheduler and orchestration tool integration, and executor support. Please refer to Supplementary Table 1 - Sheet 2 (Scalability).
* **Learning resources**: Official tutorials, forums and events (3), tutorials and forums (2), tutorials or forums (1).
* **Pipelines Initiatives**: Community and curated (3), community or curated (2), not community or curated (1).

By comparing the example code of the respective workflow frameworks, it also becomes clear that we need not only look at example code of POC workflows, but actual production-ready workflows and pipelines. Such code often require a lot more functionality, including:

* Error handling
* Logging
* Data provenance
* Parameterization
* Testing
* Documentation
* Containerization
* Resource management
