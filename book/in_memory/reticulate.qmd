---
title: Reticulate
engine: knitr
---

Reticulate is a foreign function interface in R to Python.

# Reticulate: basic functionality

Data types are automatically converted from Python to R and vice versa. A useful table of automatic conversions can be found [here](https://rstudio.github.io/reticulate/articles/calling_python.html#type-conversions). 


You can easily import python modules, and call the functions in the following way:
```{r}
library(reticulate)

bi <- reticulate::import_builtins()
rd <- reticulate::import("random")

example <- c(1,2,3)
bi$max(example)
rd$choice(example)
bi$list(bi$reversed(example))
```

Numpy is also easily used:
```{r}
np <- reticulate::import("numpy")

a <- np$asarray(tuple(list(1,2), list(3, 4)))
b <- np$asarray(list(5,6))
b <- np$reshape(b, newshape = tuple(1L,2L))

np$concatenate(tuple(a, b), axis=0L)
```

If you want more finegrained control over conversion, you can specify in the import statement that you do not want results of functions of that package to be converted to R data types.
```{r}
np <- reticulate::import("numpy", convert = FALSE)

a <- np$asarray(tuple(list(1,2), list(3, 4)))
b <- np$asarray(list(5,6))
b <- np$reshape(b, newshape = tuple(1L,2L))

np$concatenate(tuple(a, b), axis=0L)
```

You can explicitly convert data types:
```{r}
result <- np$concatenate(tuple(a, b), axis=0L)

py_to_r(result)

result_r <- py_to_r(result)
r_to_py(result_r)
```


# Interactive sessions
One of the most useful ways to take advantage of in-memory interoperability is to use it in interactive sessions, where you're exploring the data and want to try out some functions non-native to your language of choice.

Jupyter notebooks (and some other notebooks) make this possible from the Python side: using IPython line and cell magic and rpy2, you can easily run an R jupyter cell in your notebooks.

```{python show_magic, eval=FALSE}
%load_ext rpy2.ipython  # line magic that loads the rpy2 ipython extension.
                        # this extension allows the use of the following cell magic

%%R -i input -o output  # this line allows to specify inputs 
                        # (which will be converted to R objects) and outputs 
                        # (which will be converted back to Python objects) 
                        # this line is put at the start of a cell
                        # the rest of the cell will be run as R code

```


# Usecase
We will not showcase the usefulness of reticulate by using the DE analysis: it would involve loading in `pandas` to create a Python dataframe, adding rownames and columnnames and then grouping them, but that is easier to do just in R.

A more interesting thing you can do using `reticulate` is interacting with anndata-based Python packages, such as `scanpy`! 

```{r scanpy_1}
library(anndata)
library(reticulate)
sc <- import("scanpy")

adata_path <- "../usecase/data/sc_counts_subset.h5ad"
adata <- anndata::read_h5ad(adata_path)
```

We can preprocess the data:
```{r scanpy_preprocess}
sc$pp$filter_cells(adata, min_genes = 200)
sc$pp$filter_genes(adata, min_cells = 3)
```

```{r scanpy_dimred}
sc$pp$pca(adata)
sc$pp$neighbors(adata)
sc$tl$umap(adata)

adata
```

We can't easily show the result of the plot in this Quarto notebook, but we can save it and show it:

```{r scanpy_plot}
path <- "umap.png"
sc$pl$umap(adata, color="leiden_res1", save=path)
```

![UMAP plot of the adata object](../../figuresumapumap.png){#fig-umap.png})